import os
import shutil
import time
import csv

from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.webdriver.common.appiumby import AppiumBy
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
KEYWORDS_CSV_FILE = "keywords.csv"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
SEARCH_DELAY = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)
CLEAR_DELAY = 1   # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è (—Å–µ–∫—É–Ω–¥—ã)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
WAIT_TIMEOUT = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
POLL_FREQUENCY = 0.5  # –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)


def load_keywords_from_csv(csv_file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∏—Å–∫–æ–≤—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    """
    keywords = []
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            csv_reader = csv.reader(file)
            for row in csv_reader:
                if row and row[0].strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    keywords.append(row[0].strip())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ {csv_file_path}")
        return keywords
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file_path}")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {csv_file_path}: {str(e)}")
        return []


def safe_click_element(driver, wait, locator, locator_value, action_description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üîç –û–∂–∏–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è: {action_description}")
        element = wait.until(EC.element_to_be_clickable((locator, locator_value)))
        print(f"‚úÖ –ö–ª–∏–∫–∞–µ–º: {action_description}")
        element.click()
        return True
    except TimeoutException:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {action_description}")
        print(f"   –õ–æ–∫–∞—Ç–æ—Ä: {locator} = '{locator_value}'")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {action_description}")
        print(f"   –û—à–∏–±–∫–∞: {str(e)}")
        return False


def safe_send_keys(driver, wait, locator, locator_value, text, action_description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üîç –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è: {action_description}")
        element = wait.until(EC.element_to_be_clickable((locator, locator_value)))
        print(f"üìù –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç: '{text}' - {action_description}")
        element.clear()
        element.send_keys(text)
        return True
    except TimeoutException:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞: {action_description}")
        print(f"   –õ–æ–∫–∞—Ç–æ—Ä: {locator} = '{locator_value}'")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {action_description}")
        print(f"   –û—à–∏–±–∫–∞: {str(e)}")
        return False


def safe_clear_field(driver, wait, locator, locator_value, action_description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ: {action_description}")
        element = wait.until(EC.element_to_be_clickable((locator, locator_value)))
        element.clear()
        return True
    except TimeoutException:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {action_description}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—è: {action_description}")
        print(f"   –û—à–∏–±–∫–∞: {str(e)}")
        return False


def preflight_checks():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–µ—Å—Å–∏–∏ Appium."""
    print("üîé Preflight checks:")
    sdk_root = os.environ.get("ANDROID_SDK_ROOT") or os.environ.get("ANDROID_HOME")
    if not sdk_root:
        print("‚ö†Ô∏è  ANDROID_SDK_ROOT / ANDROID_HOME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–ø–∏—Å–∞—Ç—å:")
        print("   ANDROID_SDK_ROOT=%LOCALAPPDATA%\\Android\\Sdk")
    else:
        print(f"‚úÖ ANDROID_SDK_ROOT/ANDROID_HOME: {sdk_root}")

    adb_path = shutil.which("adb")
    if not adb_path:
        print("‚ö†Ô∏è  adb –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –î–æ–±–∞–≤—å '%LOCALAPPDATA%\\Android\\Sdk\\platform-tools' –≤ PATH.")
    else:
        print(f"‚úÖ adb –Ω–∞–π–¥–µ–Ω: {adb_path}")
    print("‚Äî" * 60)


# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –î–õ–Ø –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –£–°–¢–†–û–ô–°–¢–í–ê SAMSUNG A50
# ============================================================================

CAPS = {
    "platformName": "Android",
    "appium:automationName": "UiAutomator2",
    # –í–ê–ñ–ù–û: udid –æ—Ç–¥–µ–ª—å–Ω–æ, deviceName ‚Äî —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
    "appium:udid": "ca68f122",
    "appium:deviceName": "14",

    "appium:appPackage": "net.metaquotes.metatrader4",
    "appium:appActivity": "net.metaquotes.metatrader4.ui.MainActivity",
    "appium:appWaitActivity": "*",

    "appium:noReset": True,
    "appium:newCommandTimeout": 300,
    "appium:autoGrantPermissions": True
}

print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Samsung A50")
print("üì± UDID:", CAPS["appium:udid"])
print("üì¶ App Package:", CAPS["appium:appPackage"])
print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã—à–µ!")
preflight_checks()

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
# ============================================================================

try:
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium Server...")
    # Appium 2: –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å ‚Äî "/", –ù–ï /wd/hub
    options = UiAutomator2Options().load_capabilities(CAPS)
    driver = webdriver.Remote(command_executor="http://127.0.0.1:4723", options=options)

    wait = WebDriverWait(driver, WAIT_TIMEOUT, poll_frequency=POLL_FREQUENCY)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!")

except WebDriverException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium Server: {str(e)}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("   - Appium Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4723 (–±–µ–∑ /wd/hub)")
    print("   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ `adb devices` (—Å—Ç–∞—Ç—É—Å device)")
    print("   - ANDROID_SDK_ROOT/ANDROID_HOME –∑–∞–¥–∞–Ω—ã, –∞ adb –µ—Å—Ç—å –≤ PATH")
    raise

# ============================================================================
# –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MetaTrader 4...")
time.sleep(5)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–ê–õ–û–ì–û–í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

accept_button_id = "net.metaquotes.metatrader4:id/accept_button"
max_accept_attempts = 3

for attempt in range(max_accept_attempts):
    if safe_click_element(driver, wait, AppiumBy.ID, accept_button_id, f"–ö–Ω–æ–ø–∫–∞ accept (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"):
        print(f"‚úÖ –ü—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        time.sleep(2)
    else:
        print(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ accept –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        break

# ============================================================================
# –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Æ
# ============================================================================

#if not safe_click_element(driver, wait, AppiumBy.ID, "net.metaquotes.metatrader4:id/actionbar_app_icon", "–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ action bar"):
#    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

#if not safe_click_element(driver, wait, AppiumBy.ID, "net.metaquotes.metatrader4:id/account_mark", "–ú–µ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"):
#    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

#xpath_image = "/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.RelativeLayout[2]/android.widget.ImageView"

#if not safe_click_element(driver, wait, AppiumBy.XPATH, xpath_image, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é"):
#    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
#    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ XPath —á–µ—Ä–µ–∑ Appium Inspector –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

#xpath_text = "/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[1]/android.widget.TextView[1]"

#if not safe_click_element(driver, wait, AppiumBy.XPATH, xpath_text, "–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç"):
#    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
#    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ XPath —á–µ—Ä–µ–∑ Appium Inspector –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

# ============================================================================
# –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ë–†–û–ö–ï–†–û–í
# ============================================================================

try:
    print("üîç –ò—â–µ–º –ø–æ–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞...")
    filter_element = wait.until(EC.element_to_be_clickable((AppiumBy.ID, "net.metaquotes.metatrader4:id/filter")))
    print("‚úÖ –ü–æ–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–π–¥–µ–Ω–æ")
    filter_element.click()
    print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –ø–æ–ª—é —Ñ–∏–ª—å—Ç—Ä–∞")

    search_combinations = load_keywords_from_csv(KEYWORDS_CSV_FILE)
    if not search_combinations:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        driver.quit()
        exit()
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å {len(search_combinations)} –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞...")

    successful_searches = 0
    failed_searches = 0

    for idx, combination in enumerate(search_combinations, 1):
        try:
            print(f"\nüìù –ü–æ–∏—Å–∫ {idx}/{len(search_combinations)}: '{combination}'")
            if safe_send_keys(driver, wait, AppiumBy.ID, "net.metaquotes.metatrader4:id/filter", combination, f"–í–≤–æ–¥ '{combination}'"):
                successful_searches += 1
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª–∏ '{combination}'")
                time.sleep(SEARCH_DELAY)
                if safe_clear_field(driver, wait, AppiumBy.ID, "net.metaquotes.metatrader4:id/filter", f"–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ '{combination}'"):
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –ø–æ–ª–µ –ø–æ—Å–ª–µ '{combination}'")
                    time.sleep(CLEAR_DELAY)
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –ø–æ—Å–ª–µ '{combination}'")
                    failed_searches += 1
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ '{combination}'")
                failed_searches += 1

        except Exception as search_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{combination}': {search_error}")
            failed_searches += 1
            continue

    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_searches}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {failed_searches}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_searches / len(search_combinations) * 100):.1f}%")

except TimeoutException:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞")
    print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print("   - –ò–∑–º–µ–Ω–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("   - –≠–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π ID –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ Appium Inspector –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —ç–ª–µ–º–µ–Ω—Ç–∞")
except Exception as e:
    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")

# ============================================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´
# ============================================================================

print("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
time.sleep(3)

try:
    driver.quit()
    print("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

print("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")